spring:
  profiles:
    active: local

  data:
    redis:
      repositories:
        enabled: false  # выключает автоматическую генерацию Spring Data Redis репозиториев

  mail:
    host: smtp.gmail.com
    port: 587
    username: my@gmail.com
    password: "**** **** **** ****"
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true  # включает STARTTLS, то есть шифрование по TLS, если сервер его поддерживает

  mvc:
    throw-exception-if-no-handler-found: true  # Spring будет выбрасывать исключение, если для запроса не найден соответствующий обработчик

  web:
    resources:
      add-mappings: false  # отключает добавление стандартных маппингов для статических ресурсов

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: "********************"
            client-secret: "********************"
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            authorization-grant-type: authorization_code
          facebook:
            client-id: "****************"
            client-secret: "****************"
            scope: email, public_profile
            redirect-uri: "{baseUrl}/login/oauth2/code/facebook"
            authorization-grant-type: authorization_code
        provider:
          facebook:
            user-info-uri: https://graph.facebook.com/me?fields=id,name,email,picture

  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

cloud:
  aws:
    credentials:
      access-key: "*************************"
      secret-key: "*************************"
    region:
      static: eu-north-1

frontend:
  url: "http://cinemate.com:3000"

security:
  secret_key: "********************"
  access_token_expiration_time: 10  # 10 min
  refresh_token_expiration_time: 30  # 30 min
  header_auth_name: Authorization
  header_value_auth_prefix: Bearer
  header_value_basic_auth_prefix: Basic

amazon_s3:
  storage_name: "cinemate-storage"
  credential_name: "s3-uploader"
  dns_cloudfront_url: "https://****************.cloudfront.net/"
  poster_root_path_prefix: "posters"
  trailer_root_path_prefix: "trailers"
  avatar_root_path_prefix: "avatars"
  genre_root_path_prefix: "genres"

redis_data:
  user_details_key_prefix: "user::details::"
  token_key_prefix: "token::"
  token_user_id_key_prefix: "user_id_tokens::"
  reset_token_key_prefix: "reset_token::"
  user_provider_key_prefix: "user_provider::"
  genres_test_key_prefix: "genres_test_user_id"
  oauth_success_token_key_prefix: "oauth_success_token"
  user_details_expiration_time: 3600  # 3600 60 min
  reset_token_expiration_time: 600  # 600 10 min
  genres_test_expiration_time: 24  # 24 hours
  oauth_success_token_expiration_time: 1  # 1 1 min
  base_redis_expiration_time: 3600  # 3600 60 min

admin_data:
  password: $2a$10$e.lC9uZMHSaOBHjgRFMUJen3TBJLrroMIcxpeBQKB6j8dZbDsBIYG
  role: ROLE_ADMIN

user_data:
  password: $2a$10$uHVMb6KYlogP7T4C0UPLZ.mkR2zmh4eM/rxPk82KQ76.3bmV8uYGC
  role: ROLE_USER
